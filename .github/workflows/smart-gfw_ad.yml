name: Update SmartDNS Rules（GFW+AD）

on:
  schedule:
    - cron: "0 */1 * * *"   # 每小时运行一次（UTC时间）
  workflow_dispatch:       # 允许手动触发

jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install tools
        run: sudo apt-get update && sudo apt-get install -y wget

      - name: Build gfw.conf if updated
        run: bash build-gfw.sh

      - name: Download AD rules
        run: |
          wget -q -O anti-ad-for-smartdns.conf "https://anti-ad.net/anti-ad-for-smartdns.conf"
          wget -q -O anti-ad-white-for-smartdns.conf "https://raw.githubusercontent.com/privacy-protection-tools/dead-horse/master/anti-ad-white-for-smartdns.txt"

      - name: Check for file changes
        id: git-check
        run: |
          # 使用 git status 检查是否有任何被追踪的文件发生了变化
          # --porcelain 会在有变更时输出内容，无变更时无输出
          if [[ -n $(git status --porcelain) ]]; then
            echo "::notice::检测到规则文件更新，准备提交。"
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::所有规则均无更新，跳过提交。"
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push if changed
        id: push_step
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          # 添加所有可能变更的文件
          git add gfw.conf anti-ad-for-smartdns.conf anti-ad-white-for-smartdns.conf
          git commit -m "Auto update SmartDNS rules at $(date '+%F %T')"
          git push

 #     - name: Notify clients to update
 #       if: steps.push_step.outcome == 'success'
 #       run: |
          # 定义通知函数，包含重试逻辑
          notify_client() {
            local client_name=$1
            local webhook_url=$2
            local webhook_secret=$3
            local max_attempts=3
            local attempt=1
            local status_code

            echo "Notifying ${client_name}..."
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts for ${client_name}..."
              status_code=$(curl --write-out "%{http_code}" --silent --output /dev/null \
                --connect-timeout 5 \
                --max-time 10 \
                --retry 2 \
                --retry-delay 2 \
                --retry-max-time 30 \
                -X POST \
                -H "X-Hook-Secret: ${webhook_secret}" \
                -H "Content-Length: 0" \
                "${webhook_url}")

              if [ "$status_code" -eq 200 ]; then
                echo "::notice::Successfully notified ${client_name} (Status: $status_code)"
                return 0
              else
                echo "::warning::Failed to notify ${client_name} (Status: $status_code) on attempt $attempt"
                sleep 2
              fi
              ((attempt++))
            done

            echo "::error::Failed to notify ${client_name} after $max_attempts attempts (Final Status: $status_code)"
            return 1
          }

          # 并行发送通知
          notify_client "OpenWrt" "${{ secrets.OPENWRT_WEBHOOK_URL }}" "${{ secrets.OPENWRT_WEBHOOK_SECRET }}" &
          notify_client "Ubuntu" "${{ secrets.UBUNTU_WEBHOOK_URL }}" "${{ secrets.UBUNTU_WEBHOOK_SECRET }}" &

          # 等待所有通知完成
          wait

      - name: Job Summary
        if: always()
        run: |
          if [[ ${{ steps.git-check.outputs.changes }} == 'true' ]]; then
            echo "✅ 本次运行完成：检测到规则更新，并已成功推送到仓库和客户端。"
          else
            echo "☑️ 本次运行完成：规则列表无变化，未执行任何推送操作。"
          fi